# Summary of Fingerprint Registration Mechanisms 

in PolyglotMolPolyglotMol employs a flexible registration system for its featurizers, including various molecular fingerprints. This system ensures that featurizers are only made available if their underlying dependencies are met. All registrations use the central polyglotmol.representations.utils.registry.register_featurizer function.Here's a breakdown of the registration mechanisms observed in the fingerprint modules:1. RDKit Fingerprints (fingerprints/rdkit.py)Mechanism: Explicit registration after class definitions, conditional on RDKit availability.Process:A base class, BaseRDKitFingerprint, is defined.Concrete RDKit fingerprint classes (e.g., RDKitTopologicalFP, MorganBitFP, MACCSKeysFP) inherit from this base. These class definitions are only executed if RDKit components are successfully loaded (checked by _ensure_rdkit_loaded() which sets _RDKIT_LOADED_SUCCESSFULLY).A dedicated registration block at the end of the module iterates through a predefined list of desired fingerprint configurations (e.g., "morgan_fp_r2_2048", "maccs_keys").For each configuration, register_featurizer() is called explicitly, providing:name: The unique PolyglotMol name for the featurizer configuration.cls: The specific concrete RDKit fingerprint class (e.g., MorganBitFP).default_kwargs: A dictionary of parameters (e.g., {"radius": 2, "nBits": 2048}) to instantiate the class with for this specific named configuration.description: A human-readable description.This entire registration block is also conditional on _RDKIT_LOADED_SUCCESSFULLY.Key Characteristics:Allows multiple named configurations for a single featurizer class (e.g., Morgan fingerprints with different radii and bit lengths).Centralized registration logic for all RDKit-based fingerprints within the module.Robustly handles cases where RDKit might not be fully available.2. CDK Fingerprints (fingerprints/cdk.py)Mechanism: Decorator-based registration, conditional on RDKit and CDK availability.Process:A base class, BaseCDKFingerprint, is defined.Concrete CDK fingerprint classes (e.g., CDKFP, CDKExtFP, CDKMACCSFP) inherit from this base. Each class typically sets a _fp_type_enum class attribute to specify the internal CDK fingerprint type it wraps.Each concrete class definition is immediately preceded by the @register_featurizer("name", description="...") decorator. This decorator handles the registration of the class under the given "name".The definition of all these CDK featurizer classes (and thus their registration) is conditional on the successful loading of both RDKit (for input processing, checked by _ensure_rdkit_for_cdk_loaded()) and CDK-pywrapper components (checked by _ensure_cdk_components_loaded()).Key Characteristics:Registration is tightly coupled with the class definition via decorators.Each registered name typically corresponds to a distinct subclass, clearly encapsulating one type of CDK fingerprint.Relies on helper functions to ensure all necessary components from both RDKit and CDK are loaded before attempting class definition and registration.3. Datamol/Molfeat Fingerprints (fingerprints/datamol.py)Mechanism: Explicit registration using a configuration dictionary and a single base wrapper class, conditional on molfeat availability.Process:A base wrapper class, BaseDatamolFPCalculator, is defined to interface with molfeat.calc.FPCalculator.A dictionary, DATAMOL_FINGERPRINTS_CONFIG, stores the configurations for various fingerprints available through molfeat. Each entry maps a PolyglotMol short name (e.g., "ecfp4") to:fp_name: The internal name recognized by molfeat's FPCalculator (e.g., "ecfp").params: Default parameters for that fingerprint (e.g., {"radius": 2, "length": 2048}).description: A human-readable description.A registration block at the end of the module iterates through DATAMOL_FINGERPRINTS_CONFIG.For each entry, register_featurizer() is called explicitly:name: A PolyglotMol-standardized name (e.g., "datamol_ecfp4").cls: The common BaseDatamolFPCalculator class.default_kwargs: A dictionary combining the fp_name (for molfeat) and other params from the configuration. This allows BaseDatamolFPCalculator to instantiate the correct underlying molfeat calculator.description: A human-readable description.This registration process is conditional on molfeat being available and its FPCalculator class being successfully loaded (checked by deps.is_molfeat_available() and _ensure_molfeat_loaded()).Key Characteristics:Uses a single, versatile base class to wrap many different molfeat fingerprints.Configuration-driven: A dictionary clearly defines all supported molfeat fingerprints and their parameters for PolyglotMol.Handles potential sub-dependencies (like map4-ojmb or pyavalonkit) by providing informative messages if molfeat fails to initialize a specific calculator.Common Principles Across Fingerprint Modules:Dependency Guarding: All modules robustly check for the availability of their core external libraries (RDKit, CDK-pywrapper, molfeat) before attempting to define or register featurizers. This prevents import errors if a dependency is missing.Lazy Loading: Dependencies are typically loaded lazily via the central polyglotmol.dependencies module, improving initial import times.Central Registry Usage: All fingerprint types are registered into the same PolyglotMol registry using register_featurizer, making them discoverable via get_featurizer and list_available_featurizers.Consistent Interface: Despite different underlying libraries, the aim is to provide a consistent featurization interface to the user through inheritance from BaseFeaturizer.Clear Naming and Configuration: Registered names are descriptive, and default_kwargs are used to manage different parameterizations of the same underlying fingerprinting algorithm.This multi-faceted approach to registration allows PolyglotMol to support a wide range of fingerprint types from various libraries while maintaining a manageable and robust codebase.